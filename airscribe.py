"""
input: input file, patient_id
ouput: make output file
"""
def analyze(input_file, patient_id):
	question_db = get_question_db()
	spoken_questions = get_spoken_questions(question_db)

	sentences = breakdown(input_file)
	qanda = get_qanda(sentences, spoken_questions)

	print generate_document_header(patient_id)
	print "=== Information ==="
	print generate_standard(qanda, question_db)
	print "=== Feedback for Patient ==="
	print generate_summary(qanda)
	print "=== Full Interview Transcript ==="
	print generate_dialogue(qanda)
	print "Generated by Airscribe"

	date = "160214"
	print_to_document("", "{0}_discharge_interview_{1}.txt".format(patient_id, date))

"""
input: text file
output: list of sentences
"""
def breakdown(input_file):
	# note IBM watson has periods but no other punctuation
	chunk_of_text = ""
	with open(input_file, 'r') as f:
		# expect file to be one long line
		text = f.readlines()
	sentences = text[0].strip().split(".")
	processed = []
	for s in sentences:
		s = s.strip()
		if len(s) > 0:
			processed.append(s)
	return processed

"""
input: list of sentences
output: dictionary of responses
"""
def get_qanda(sentences, question_db):
	qanda = {}
	curr_question = None
	response = "" # usually an answer
	for sentence in sentences:
		# new question
		if sentence.lower() in question_db: 
			# print sentence
			# deal with prev question
			if curr_question:
				qanda[curr_question] = response
			curr_question = sentence
			response = ""
		else:
			response += sentence + ". "
	# last question
	if curr_question:
		qanda[curr_question] = response
	# print qanda
	return qanda

"""
input: dictionary of responses
output: standard, formatted interview info
"""
def generate_standard(qanda, question_db):
	text = ""
	for question in qanda:
		standard_form = question_db[1]['standard_form']
		answer = qanda[question]
		text += "{0}:\t{1}\n".format(standard_form, answer)
	return text

"""
input: dictionary of responses
output: summary of feedback
"""
def generate_summary(qanda):
	return "Feature not yet available!\n"

"""
input: dictionary of responses
ouput: dialogue format
"""
def generate_dialogue(qanda):
	text = ""
	for question in qanda:
		text += "Q: {}?\n".format(question)
		text += "A: {}\n".format(qanda[question])
	return text

"""
input: patient_id
output: patient details???
===
PATIENT ID:
PATIENT NAME:
"""
def generate_document_header(patient_id):
	patient_name = "Parkinson, Pansy"
	date = "Feb 14, 2016"
	interviewer_name = "Zhu, Eugenie"
	text = "Hospital Discharge Interview\nPATIENT ID: {0}\nPATIENT NAME: {1}\n".format(patient_id, patient_name) 
	text += "DATE: {0}\nINTERVIEWER: {1}\n".format(date, interviewer_name)
	return text

"""
input: dictionary of responses, optional summary?
output: print formatted text file
"""
def print_to_document(text, filename):
	print text
	# with open(filename, 'w') as f:
	# 	f.write("blah")

def get_question_db():
	# kinda sketch representation of Question struct
	# Question = {'spoken_form' = "how are you", 'standard_form'="Feelings", 'answers'=["good", "bad"]}
	question_db = []
	question_db.append({
		'spoken_form' : "how are you", 
		'standard_form' : "Feelings", 
		'answers' : ["good", "bad"]})
	question_db.append({
		'spoken_form' : "where do you live", 
		'standard_form' : "Hometown", 
		'answers' : ["Fremont", "San Jose", "San Francisco", "Houston"]})
	question_db.append({
		'spoken_form' : "do you live by yourself", 
		'standard_form' : "Lives alone", 
		'answers' : ["Yes", "No"]})

	#print question_db
	return question_db

def get_spoken_questions(question_db):
	spoken_questions = []
	for question in question_db:
		spoken_questions.append(question['spoken_form'])
	print spoken_questions
	return spoken_questions

if __name__ == "__main__":
	# sample workflow
	input_file = "input.txt"
	# need patient info
	patient_id = 12345
	analyze("input.txt", patient_id)

